[cache:a]
LOCAL_DATA_DIR = <%= @storage_dir %>/whisper/
USER =
MAX_CACHE_SIZE = <%= @carbon_options[:max_cache_size] %>
MAX_UPDATES_PER_SECOND = <%= @carbon_options[:max_updates_per_second] %>
MAX_CREATES_PER_MINUTE = <%= @carbon_options[:max_creates_per_minute] %>
LINE_RECEIVER_INTERFACE = <%= @carbon_options[:caches][:a][:line_receiver_interface] %>
LINE_RECEIVER_PORT = <%= @carbon_options[:caches][:a][:line_receiver_port] %>
ENABLE_UDP_LISTENER = <%= @carbon_options[:enable_udp_listener] %>
UDP_RECEIVER_INTERFACE = <%= @carbon_options[:caches][:a][:udp_receiver_interface] %>
UDP_RECEIVER_PORT = <%= @carbon_options[:caches][:a][:udp_receiver_port] %>
PICKLE_RECEIVER_PORT = <%= @carbon_options[:caches][:a][:pickle_receiver_port] %>
USE_INSECURE_UNPICKLER = <%= @carbon_options[:use_insecure_unpickler] %>
CACHE_QUERY_PORT = <%= @carbon_options[:caches][:a][:cache_query_port] %>
USE_FLOW_CONTROL = <%= @carbon_options[:use_flow_control] %>
LOG_UPDATES = <%= @carbon_options[:log_whisper_updates] %>
WHISPER_AUTOFLUSH = <%= @carbon_options[:whisper_autoflush] %>
LOG_CACHE_QUEUE_SORTS = <%= @carbon_options[:log_cache_queue_sorts] %>
LOG_UPDATES = <%= @carbon_options[:log_updates] %>
LOG_LISTENER_CONNECTIONS = <%= @carbon_options[:log_listener_connections] %>
LOG_CACHE_HITS = <%= @carbon_options[:log_cache_hits] %>
WHISPER_FALLOCATE_CREATE = <%= @carbon_options[:whisper_fallocate_create] %>
<% if @carbon_options[:enable_amqp] %>
ENABLE_AMQP = True
<% else %>
<% end %>
<% if @carbon_options[:enable_amqp] %>
AMQP_HOST = <%= @carbon_options[:amqp_host] %>
AMQP_PORT = <%= @carbon_options[:amqp_port] %>
AMQP_VHOST = <%= @carbon_options[:amqp_vhost] %>
AMQP_USER = <%= @carbon_options[:amqp_user] %>
AMQP_PASSWORD = <%= @carbon_options[:amqp_password] %>
AMQP_EXCHANGE = <%= @carbon_options[:amqp_exchange] %>
AMQP_METRIC_NAME_IN_BODY = <%= @carbon_options[:amqp_metric_name_in_body] ? "True" : "False" %>
<% else %>
<% end %>

<% if @carbon_options[:caches].length > 1 -%>
# Configure special settings for other the carbon-cache instances
<%   @carbon_options[:caches].each do |instance| -%>
<%     if instance.first != "a" -%>
[cache:<%= instance.first %>]
LINE_RECEIVER_INTERFACE = <%= instance.last[:line_receiver_interface] %>
LINE_RECEIVER_PORT = <%= instance.last[:line_receiver_port] %>
PICKLE_RECEIVER_INTERFACE = <%= instance.last[:pickle_receiver_interface] %>
PICKLE_RECEIVER_PORT = <%= instance.last[:pickle_receiver_port] %>
CACHE_QUERY_INTERFACE = <%= instance.last[:cache_query_interface] %>
CACHE_QUERY_PORT = <%= instance.last[:cache_query_port] %>
USE_FLOW_CONTROL = <%= @carbon_options[:use_flow_control] %>
LOG_UPDATES = <%= @carbon_options[:log_whisper_updates] %>
WHISPER_AUTOFLUSH = <%= @carbon_options[:whisper_autoflush] %>
LOG_CACHE_QUEUE_SORTS = <%= @carbon_options[:log_cache_queue_sorts] %>
LOG_UPDATES = <%= @carbon_options[:log_updates] %>
LOG_LISTENER_CONNECTIONS = <%= @carbon_options[:log_listener_connections] %>
LOG_CACHE_HITS = <%= @carbon_options[:log_cache_hits] %>
WHISPER_FALLOCATE_CREATE = <%= @carbon_options[:whisper_fallocate_create] %>
<%     end -%>
<%   end -%>
<% else -%>
<% end -%>

[relay:a]
LINE_RECEIVER_INTERFACE = <%= @carbon_options[:relays][:a][:line_receiver_interface] %>
LINE_RECEIVER_PORT = <%= @carbon_options[:relays][:a][:line_receiver_port] %>
PICKLE_RECEIVER_INTERFACE = <%= @carbon_options[:relays][:a][:pickle_receiver_interface] %>
PICKLE_RECEIVER_PORT = <%= @carbon_options[:relays][:a][:pickle_receiver_port] %>
UDP_RECEIVER_INTERFACE = <%= @carbon_options[:relays][:a][:udp_receiver_interface] %>
UDP_RECEIVER_PORT = <%= @carbon_options[:relays][:a][:udp_receiver_port] %>
RELAY_METHOD = <%= @carbon_options[:relays][:a][:method] %>
REPLICATION_FACTOR = <%= @carbon_options[:relays][:a][:replication_factor] %>
<% if @carbon_options[:relay][:primary_relay].length > 0 -%>
DESTINATIONS = <%= @carbon_options[:relay][:primary_relay].join(', ') %>
<% else -%>
DESTINATIONS = 127.0.0.1:2004
<% end -%>
MAX_DATAPOINTS_PER_MESSAGE = <%= @carbon_options[:relay][:max_datapoints_per_message] %>
MAX_QUEUE_SIZE = <%= @carbon_options[:relay][:max_queue_size] %>
USE_FLOW_CONTROL = <%= @carbon_options[:relay][:use_flow_control] %>

<% if @carbon_options[:relays].length > 1 -%>
#configure additional relays
<% @carbon_options[:relays].each do |instance| -%>
<%  if instance.first != "a" -%>
[relay:<%= instance.first %>]
LINE_RECEIVER_INTERFACE = <%= instance.last[:line_receiver_interface] %>
LINE_RECEIVER_PORT =  <%= instance.last[:line_receiver_port] %>
PICKLE_RECEIVER_INTERFACE =  <%= instance.last[:pickle_receiver_interface] %>
PICKLE_RECEIVER_PORT = <%= instance.last[:pickle_receiver_port] %>
UDP_RECEIVER_INTERFACE = <%= instance.last[:udp_receiver_port] %>
UDP_RECEIVER_PORT = <%= instance.last[:udp_receiver_port] %>
<% if @carbon_options[:relay][:destinations].length > 0 -%>
DESTINATIONS = <%= @carbon_options[:relay][:destinations].join(', ') %>
<% end -%>
RELAY_METHOD = <%= instance.last[:method] %>
REPLICATION_FACTOR = <%= instance.last[:replication_factor] %>
MAX_DATAPOINTS_PER_MESSAGE = <%= @carbon_options[:relay][:max_datapoints_per_message] %>
MAX_QUEUE_SIZE = <%= @carbon_options[:relay][:max_queue_size] %>
USE_FLOW_CONTROL = <%= @carbon_options[:relay][:use_flow_control] %>
<% end -%>
<% end -%>
<% else -%>
<% end -%>

[aggregator]
LINE_RECEIVER_INTERFACE = <%= @carbon_options[:aggregator][:line_receiver_interface] %>
LINE_RECEIVER_PORT = <%= @carbon_options[:aggregator][:line_receiver_port] %>

PICKLE_RECEIVER_INTERFACE = <%= @carbon_options[:aggregator][:pickle_receiver_interface] %>
PICKLE_RECEIVER_PORT = <%= @carbon_options[:aggregator][:pickle_receiver_port] %>

# This is a list of carbon daemons we will send any relayed or
# generated metrics to. The default provided would send to a single
# carbon-cache instance on the default port. However if you
# use multiple carbon-cache instances then it would look like this:
#
# DESTINATIONS = 127.0.0.1:2004:a, 127.0.0.1:2104:b
#
# The format is comma-delimited IP:PORT:INSTANCE where the :INSTANCE part is
# optional and refers to the "None" instance if omitted.
#
# Note that if the destinations are all carbon-caches then this should
# exactly match the webapp's CARBONLINK_HOSTS setting in terms of
# instances listed (order matters!).
<% if @carbon_options[:aggregator][:destinations].kind_of?(Array) and @carbon_options[:aggregator][:destinations].length > 0 -%>
DESTINATIONS = <%= @carbon_options[:aggregator][:destinations].join(', ') %>
<% else -%>
DESTINATIONS = 127.0.0.1:2004
<% end -%>

# If you want to add redundancy to your data by replicating every
# datapoint to more than one machine, increase this.
REPLICATION_FACTOR = <%= @carbon_options[:aggregator][:replication_factor] %>

# This is the maximum number of datapoints that can be queued up
# for a single destination. Once this limit is hit, we will
# stop accepting new data if USE_FLOW_CONTROL is True, otherwise
# we will drop any subsequently received datapoints.
MAX_QUEUE_SIZE = <%= @carbon_options[:aggregator][:max_queue_size] %>

# Set this to False to drop datapoints when any send queue (sending datapoints
# to a downstream carbon daemon) hits MAX_QUEUE_SIZE. If this is True (the
# default) then sockets over which metrics are received will temporarily stop accepting
# data until the send queues fall below 80% MAX_QUEUE_SIZE.
USE_FLOW_CONTROL = <%= @carbon_options[:aggregator][:use_flow_control] %>

# This defines the maximum "message size" between carbon daemons.
# You shouldn't need to tune this unless you really know what you're doing.
MAX_DATAPOINTS_PER_MESSAGE = <%= @carbon_options[:aggregator][:max_datapoints_per_message] %>

# This defines how many datapoints the aggregator remembers for
# each metric. Aggregation only happens for datapoints that fall in
# the past MAX_AGGREGATION_INTERVALS * intervalSize seconds.
MAX_AGGREGATION_INTERVALS = <%= @carbon_options[:aggregator][:max_aggregation_intervals] %>

# Set this to True to enable whitelisting and blacklisting of metrics in
# CONF_DIR/whitelist and CONF_DIR/blacklist. If the whitelist is missing or
# empty, all metrics will pass through
# USE_WHITELIST = False

# By default, carbon itself will log statistics (such as a count,
# metricsReceived) with the top level prefix of 'carbon' at an interval of 60
# seconds. Set CARBON_METRIC_INTERVAL to 0 to disable instrumentation
# CARBON_METRIC_PREFIX = carbon
# CARBON_METRIC_INTERVAL = 60
